<!-- Collapsible navbar -->
	<nav class="navbar navbar-default">
		<div class="container-fluid">
			<div class="navbar-header">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#nav">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
				<a class="navbar-brand" href=""><img class="logo" src="/assets/logos/logo-full.png" alt="Chat Channel" height="50"></a>
			</div>
			<div class="collapse navbar-collapse" id="nav">
				<ul class="nav navbar-nav">
					<li><a href="/"><span class="glyphicon glyphicon-home"></span> Main</a></li>
					<li class="dropdown"><a class="dropdown-toggle" data-toggle="dropdown" href=""><span class="glyphicon glyphicon-user"></span> Your Profile<span class="caret"></span></a>
						<ul class="dropdown-menu">
							<% if session[:user_id] %>
								<li><a href="/users/<%=session[:user_id]%>"> Your Profile</a></li>
								<li><a href="/users/<%= session[:user_id] %>/edit">Edit User</a></li>
								<% if @check.exists? %>
									<li><a href="/channels/<%= @check[0].id %>/edit">Edit Channel</a></li>
								<% else %>
									<li><a href="/channels/new">New Channel</a></li>
								<% end %>
							<% else %>
								<li><a href="/sessions/new">Profile</a></li>
							<% end %>
						</ul>
					<li><a href="/faq"><span class="glyphicon glyphicon-question-sign"></span> FAQ</a></li>
					<li><a href="/blog"><span class="glyphicon glyphicon-comment"></span> Blog</a></li>
				</ul>
				<ul class="nav navbar-nav navbar-right">
					<li class="active"><a href="/admin"><span class="glyphicon glyphicon-stats"></span> Admin</a></li>
					<% if session[:user_id] %>
						<li><a href="/logout"><span class="glyphicon glyphicon-log-out"></span> Logout</a></li>
					<% else %>
						<li><a href="/sessions/new"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
					<% end %>
				</ul>
			</div>
		</div>
	</nav>

<h1 style="text-align:center;">Admin View</h1>

<div class='col-sm-12 box'>
	<h2> All Channels </h2>
	<div id="channels"></div>
	<div id="channels_pages" style="text-align:center;"></div>
</div>

<div class='col-sm-12 box'>
	<h2> All Users </h2>
	<div id="users"></div>
	<div id="users_pages" style="text-align:center;"></div>
</div>

<div class='col-sm-12 box'>
	<h2> All Comments </h2>
	<div id="my_comments"></div>
	<div id="my_comments_pages" style="text-align:center;"></div>
</div>

<!-- Web Console only accessable from 127.0.0.1 -->
<%#= console %>

<script type="text/javascript">
	// going to write some pagination
	$(document).ready(function(){
		
		var users = <%= @users.to_json.html_safe %>;
		var channels = <%= @channels.to_json.html_safe %>;
		var comments = <%= @comments.to_json.html_safe %>;

		// this functions a bit like a SQL join
		function join(list1, list2, id, name, field){
			for(var i=0; i<list1.length; i++){
				for(var j=0; j<list2.length; j++){
					if(list1[i][id] == list2[j].id){
						list1[i][name] = list2[j][field];
					}
				}
			}
		}

		// join user info onto channel
		join(channels, users, 'user_id', 'user', 'username');
		// join user and channel info onto comments
		join(comments, users, 'user_id', 'user', 'username');
		join(comments, channels, 'channel_id', 'channel', 'name');

		/*
		function keys(list){
			for(var key in list[0]){
				console.log(key);
			}
		}
		keys(users)
		keys(channels)
		keys(comments)
		*/

		// no need for the server to reverse order when I can do it here
		function reverse(list){
			for(var i=0; i<Math.floor(list.length/2); i++){
				var temp = list[i];
				list[i] = list[list.length-1-i];
				list[list.length-1-i] = temp;
			}
		}

		// show most recent comments first
		reverse(comments);

		function paginate(list, pgSize, divName, columnNames, actions){
			
			// these variables needed a larger scope
			var numPages = Math.ceil(list.length / pgSize);
			var current = 0;

			// mostly used in the info that goes along with the pagination
			var total = list.length;
			
			// default truncate length
			var truncate_length = 50;

			// number of pagination links shown on either side of "active", unless at ends
			var pgRadius = 4;

			// max number of pages includes a current one in the middle
			var numLinks = 2 * pgRadius + 1;
			if(numLinks > numPages){
				numLinks = numPages;
			}

			// prevent script injections and truncates long entries
			function safe(text){
				if(typeof(text) == "string"){
					var text = $($.parseHTML(text)).text();
					if(text.length > truncate_length){
						text = text.substring(0, truncate_length) + "...";
					}
				}
				return text;
			}

			// turn camelCase and underscore_separated variable names into multiple words
			// should clean up the appearance of the table header
			function style(text){
				var name = "";
				var newWord = true;
				for(var i=0; i<text.length; i++){
					if(newWord){
						name += text[i].toUpperCase();
						newWord = false;
					}else if(text[i] == "_"){
						name += " ";
						newWord = true;
					}else if(text[i] == text[i].toUpperCase()){
						if(text[i-1]){
							if(text[i-1] == text[i-1].toLowerCase()){
								name += " " + text[i];
							}else{
								name += text[i];
							}
						}
					}else{
						name += text[i];
					}
				}
				return name;
			}

			// makes a table
			function makeTable(start){
				// start making a table with the head
				var table = `<table class="table"><tr>`;
				for(var i=0; i<columnNames.length; i++){
					table += `<th>${style(columnNames[i])}</th>`;
				}
				if(actions){
					table += `<th>Actions</th>`;
				}
				table += `</tr>`;

				// fills out the body of the table
				for(var i=start*pgSize; i<(start+1)*pgSize; i++){
					if(list[i]){
						table += `<tr>`;
						for(var j=0; j<columnNames.length; j++){
							table += `<td>${safe(list[i][columnNames[j]])}</td>`;	
						}
						if(actions){
							table += `<td>`;
							for(var k=0; k<actions.length; k++){
								/*

								add custom actions in here if desired
								example usage:

								if(actions[k] == "delete"){
									table +=	`<form action="/${divName}/delete/${list[i]['id']}" method="POST"> 
													<input class="btn btn-danger btn-xs" type="submit" value="${actions[k]}">
												</form>`;
								}

								*/
								table += `<button class="btn btn-danger btn-xs">${actions[k]}</button> `;
							}
							table += `</td>`;
						}
						table += `</tr>`;
					}else{
						break;
					}
				}
				table += "</table>";
				$(`#${divName}`).html(table);
			}
			
			makeTable(current);

			// gives me a results string that looks like...
			// (showing results 21 through 41 of 277)
			function resultString(){
				var start = (current*pgSize)+1;
				var end = (current+1)*pgSize;
				if(end > total){
					end = total;
				}
				return `<p class="results ${divName}">(Showing results ${start} through ${end} of ${total})</p>`;
			}

			// makes pagination links
			function makePages(current){
				var pagination = `<ul class="pagination">
									<li><a class="${divName}" data-page="first" href=""><<</a></li>
									<li><a class="${divName}" data-page="prev" href=""><</a></li>`;
				for(var i=0; i<numLinks; i++){
					if(i == current){
						pagination += `<li class="active">`;
					}else{
						pagination += `<li>`;
					}
					pagination += `<a class="${divName}" data-page="${i}" href="">${i+1}</a></li>`;
				}
				pagination += `<li><a class="${divName}" data-page="next" href="">></a></li>
								<li><a class="${divName}" data-page="last" href="">>></a></li></ul>`;
				pagination += resultString();
				$(`#${divName}_pages`).html(pagination);
			}

			// rewrite what the pagination links show
			function redoPages(index, callback){
				// I only need to reorder pages if we have more pages than we show
				if(numLinks < numPages){
					// then check if the index is near beginning, end, or in the middle
					if(index < pgRadius + 1){
						// make the pages starting at 0 ending at numLinks
						var st = 0, ed = numLinks;
					}else if(index > pgRadius && index < numPages - pgRadius){
						// make the pages starting at index - pgRadius ending at index + pgRadius
						var st = index - pgRadius, ed = index + pgRadius + 1;
					}else if(index > numPages - pgRadius - 1){
						// make the pages starting at numPages - numLinks ending at numPages
						var st = numPages - numLinks, ed = numPages;
					}
					// neat that I need to track two indices at the same time
					for(var i=st, j=2; i<ed; i++, j++){
						// j starting at 2 skips the initial two pagination links
						$(`#${divName}_pages a:eq(${j})`).attr(`data-page`, `${i}`); // changes data-page
						$(`#${divName}_pages a:eq(${j})`).text(`${i+1}`); // changes text
					}
				}
				callback();
			}
			
			if(numPages > 1){
				makePages(current);
			}

			// listens for someone clicking a pagination link
			$(`a.${divName}`).click(function(a){
				a.preventDefault();
				$(`a.${divName}[data-page="${current}"]`).parent().removeClass("active");
				if(this.dataset.page == "first"){
					current = 0;
				}else if(this.dataset.page == "prev" && current > 0){
					current--;
				}else if(this.dataset.page == "next" && current < numPages-1){
					current++;
				}else if(this.dataset.page == "last"){
					current = numPages-1;
				}else{
					if(!isNaN(this.dataset.page)){
						current = parseInt(this.dataset.page);
					}
				}
				makeTable(current);
				redoPages(current, function(){
					// callback waits for links to be rewritten before adding class "active"
					$(`a.${divName}[data-page="${current}"]`).parent().addClass("active");
				});
				$(`.results.${divName}`).html(resultString());
			});
		}

		paginate(channels, 10, "channels", ["id", "name", "user", "description", "created_at"], ["delete"]);
		paginate(users, 10, "users", ["id", "username", "email", "is_admin", "created_at"], ["delete"]);
		paginate(comments, 10, "my_comments", ["id", "user", "channel", "body", "created_at"], ["delete"]);

	})

</script>

<style type="text/css">
	.table {
		background-color: transparent;
		margin-bottom: 0px;
	}
</style>